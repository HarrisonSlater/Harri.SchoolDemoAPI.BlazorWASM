@using Harri.SchoolDemoAPI.BlazorWASM.Components.Dialogs
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IStudentApiClient _studentClient

<PageTitle>@Text.EditStudentForm.DisplayText(StudentId)</PageTitle>

<EditForm @ref=EditForm Model="@Student" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <MudContainer MaxWidth=MaxWidth.Small>
        @if (ShowError)
        {
            <MudAlert id="student-error-alert" Severity="Severity.Error" Variant="Variant.Filled">@Text.EditStudentForm.ErrorText(StudentId)</MudAlert>
        }

        <MudText Typo="Typo.h3" GutterBottom>@Text.EditStudentForm.DisplayText(StudentId)</MudText>

        <MudCard>
            <MudCardContent>
                @if (Loading)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate/>
                }
                else
                {
                    <MudTextField id="student-name" Label="Name" @bind-Value="Student.Name" For="@(() => Student.Name)" />
                    <MudNumericField id="student-gpa" Label="GPA" @bind-Value="Student.GPA" For="@(() => Student.GPA)" Min=0 />
                }
            </MudCardContent>
            <MudCardActions>

                @if (StudentId is not null)
                {
                    <MudButton id="delete-student-button" OnClick="@(() => OpenDeleteDialog(StudentId.Value, DeleteText))" Variant="Variant.Filled" Color="Color.Error"
                               StartIcon="@Icons.Material.Filled.Delete" Disabled=@(Loading) Class="ml-3">Delete</MudButton>
                }
                <MudButton id="submit-button" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled=@(DisableSubmit || Loading) Class="ml-auto ma-4">Save</MudButton>
                @*<MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Error" Class="ml-4 ma-4">Cancel</MudButton>*@

            </MudCardActions>
        </MudCard>
    </MudContainer>
</EditForm>


@code {
    [Parameter]
    public int? StudentId { get; set; }

    public NewStudentDto Student { get; set; } = new();

    public StudentDto? ExistingStudent { get; set; }

    public EditForm? EditForm { get; set; }

    internal bool DisableSubmit { get; set; }

    internal bool Loading { get; set; }

    internal bool? IsFormUnModified => !EditForm?.EditContext?.IsModified();

    internal bool ShowError { get; set; }

    internal string DeleteText => $"Permanently delete student {ExistingStudent?.Name} with id \"{StudentId}\"";

    protected override async Task OnInitializedAsync()
    {
        if (StudentId is not null)
        {
            Loading = true;
            ExistingStudent = await _studentClient.GetStudent(StudentId.Value);
            if (ExistingStudent is not null)
            {
                Student = new NewStudentDto()
                {
                    Name = ExistingStudent.Name,
                    GPA = ExistingStudent.GPA
                };
            }
            else
            {
                //Invalid StudentId provided, redirect to home and show error
                NavigationManager.NavigateTo($"/?{Constants.QueryString.InvalidStudentId}={StudentId.Value}");
            }
            Loading = false;
        }
    }

    internal async Task HandleValidSubmit()
    {
        DisableSubmit = true;
        ShowError = false;

        if (StudentId is null)
        {
            await CreateNewStudent();
        }
        else
        {
            await UpdateStudent();
        }
    }

    private async Task CreateNewStudent()
    {
        var id = await _studentClient.AddStudent(Student);
        if (id is null)
        {
            DisableSubmit = false;
            ShowError = true;
        }
        else
        {
            NavigationManager.NavigateTo($"/students/page/1?{Constants.QueryString.CreateSuccessId}={id}");
        }
    }

    private async Task UpdateStudent()
    {
        var existingStudent = new UpdateStudentDto()
        {
            Name = Student.Name,
            GPA = Student.GPA
        };
        var response = await _studentClient.UpdateStudent(StudentId!.Value, existingStudent);

        if (response is null or false)
        {
            DisableSubmit = false;
            ShowError = true;
        }
        else
        {
            NavigationManager.NavigateTo($"/students/page/1?{Constants.QueryString.EditSuccessId}={StudentId.Value}");
        }
    }

    private async Task OpenDeleteDialog(int id, string name)
    {
        DisableSubmit = true;

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<DeleteDialog>() { { x => x.Text, name } };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete Student?", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await _studentClient.DeleteStudentRestResponse(id);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/students/page/1?{Constants.QueryString.DeleteStudentId}={id}");
            }
            else
            {
                //TODO change error message here based on 409 status code
                ShowError = true;
                DisableSubmit = true;
            }
        }
        else
        {
            DisableSubmit = ShowError; //TODO test this in auto testss
        }
    }
}