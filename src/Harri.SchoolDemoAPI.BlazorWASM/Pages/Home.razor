@page "/"
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using Harri.SchoolDemoAPI.Models.Attributes


<PageTitle>SchoolDemoAPI Blazor Admin UI</PageTitle>


<MudText Typo=Typo.h3 GutterBottom>SchoolDemoAPI Admin UI Home</MudText>

<MudContainer MaxWidth=MaxWidth.Small>
    <MudText Typo="Typo.h4" GutterBottom="true">Students</MudText>

    <MudCard id="home-student-links"> 
        <MudCardContent>
            <MudStack >
                <MudButton StartIcon=@Icons.Material.Filled.List  Variant=Variant.Filled Color=Color.Info Href="students">View all students</MudButton>

                <MudButton StartIcon=@Icons.Material.Filled.Add Variant=Variant.Filled Color=Color.Secondary Href="students/new">Create new student</MudButton>

                <EditForm OnValidSubmit=GoToEditStudent Model=EditStudentFormModel>
                    <DataAnnotationsValidator />
                    <MudStack Row AlignItems=AlignItems.Start Style="" Class="pa-2">
                        <MudTextField Variant="Variant.Outlined" @bind-Value=@EditStudentFormModel.EditStudentId Label="Student ID" Placeholder="123" 
                                      For=@(() => EditStudentFormModel.EditStudentId)></MudTextField>
                                      <MudPaper Elevation=0>
                        <MudButton ButtonType=ButtonType.Submit StartIcon=@Icons.Material.Outlined.Edit Variant=Variant.Filled Color=Color.Primary
                                       Style="text-wrap:nowrap;" Class="pa-4 mt-1">Edit student</MudButton>
                        </MudPaper>
                    </MudStack>
                </EditForm>
            </MudStack>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    public GoToEditStudentForm EditStudentFormModel { get; set; } = new GoToEditStudentForm();

    public void GoToEditStudent()
    {
        NavigationManager.NavigateTo($"/students/{EditStudentFormModel.EditStudentId}", replace: false);
    }

    public class GoToEditStudentForm
    {
        [Required(ErrorMessage = "Student ID is required.")]
        [PositiveInt(ErrorMessage = "Student ID should be a number greater than 0.")]
        public string? EditStudentId { get; set; }
    }
}