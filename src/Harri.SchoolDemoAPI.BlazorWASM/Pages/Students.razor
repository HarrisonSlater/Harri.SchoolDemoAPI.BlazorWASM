@page "/students"
@page "/students/page"
@page "/students/page/{PageNumber:int}"
@using Harri.SchoolDemoAPI.BlazorWASM.Components.Alerts
@using Harri.SchoolDemoAPI.BlazorWASM.Filters
@using System.Text.Json
@using System.Text.Json.Nodes
@using Harri.SchoolDemoAPI.BlazorWASM;
@inject NavigationManager NavigationManager
@inject IStudentApi _studentClient

<PageTitle>Students</PageTitle>

<MudContainer MaxWidth=MaxWidth.Medium>
    <MudText Typo=Typo.h3 GutterBottom>Students</MudText>

    @if (ShowError)
    {
        <MudAlert id="student-error-alert" Severity="Severity.Error" Variant="Variant.Filled">@ErrorMessage</MudAlert>
    }
    <StudentAlert Severity=Severity.Success id="student-success-alert" Class="mb-4" Message=Text.StudentsPage.SuccessMessage StudentId=@SuccessfulStudentId CloseCallback=CloseSuccessAlert />
    <StudentAlert Severity=Severity.Success id="student-edit-success-alert" Class="mb-4" Message=Text.StudentsPage.EditSuccessMessage StudentId=@EditSuccessfulStudentId CloseCallback=CloseSuccessAlert />
    <StudentAlert Severity=Severity.Warning id="student-delete-alert" Class="mb-4" Message=Text.StudentsPage.DeleteSuccessMessage StudentId=@DeleteStudentIdAlert CloseCallback=CloseSuccessAlert />

    <MudDataGrid T=StudentDto @ref=DataGrid ServerData=@((state) => ServerReload(state, new StudentSearchFilters(state.FilterDefinitions))) Hover=true Striped=true Dense=true RowsPerPage=15 CurrentPage=CurrentPage Breakpoint=Breakpoint.None
                 Filterable FilterMode=DataGridFilterMode.ColumnFilterRow>
        <Columns>
            <PropertyColumn Property="x => x.SId" Title="Student ID" Class="filter-input-sid filter-disable-operators" /> @* TODO remove css disable here? enable numeric spin?*@
            <PropertyColumn Property="x => x.Name" Title="Name" Class="filter-input-student-name filter-disable-operators" />
            <PropertyColumn Property="x => x.GPA" Class="filter-input-gpa" FilterOperators=Constants.SearchFilters.Students.GPAFilterOperators />
            <TemplateColumn CellClass="d-flex justify-end mr-2" Filterable=false>
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Class="student-edit-button" OnClick=@(() => GoToEditStudent(context.Item.SId)) Size=Size.Small Variant=Variant.Filled Color=Color.Primary StartIcon=@Icons.Material.Filled.Edit DisableElevation>Edit</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T=StudentDto PageSizeOptions=@(new int[] { 10, 15, 50, 100 }) />
        </PagerContent>
    </MudDataGrid>

</MudContainer>

@code {
    [Parameter]
    public int? PageNumber { get; set; }

    // Create/Edit success alerts
    [Parameter, SupplyParameterFromQuery(Name = Constants.QueryString.CreateSuccessId)]
    public string? SuccessfulStudentId { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = Constants.QueryString.EditSuccessId)]
    public string? EditSuccessfulStudentId { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = Constants.QueryString.DeleteStudentId)]
    public string? DeleteStudentIdAlert { get; set; }

    internal bool ShowError { get; set; }
    internal string ErrorMessage { get; set; } = DefaultErrorMessage;

    private static string DefaultErrorMessage => Text.StudentsPage.ErrorText;

    public int CurrentPage { get; set; }

    internal bool AddSuccessIdToHistory { get; set; }

    internal MudDataGrid<StudentDto>? DataGrid;

    private bool PageNumberNullInUrl { get; set; }

    // Lifecycle properties
    private bool Initialized { get; set; }

    private bool ParametersSet { get; set; }

    private bool RegisterEventHandlers { get; set; } = true;

    protected override void OnInitialized()
    {
        Initialized = true;
    }

    protected override void OnParametersSet()
    {
        if (PageNumber is null) PageNumberNullInUrl = true;

        PageNumber = PageNumber ?? 1;
        CurrentPage = (PageNumber.Value) - 1;
        ParametersSet = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (ParametersSet && RegisterEventHandlers)
        {
            RegisterEventHandlers = false;

            DataGrid!.PagerStateHasChangedEvent += () => PagerStateChanged();
        }
    }

    private void GoToEditStudent(int? sid)
    {
        NavigationManager.NavigateTo($"/students/{sid}", replace: false);
    }

    private void PagerStateChanged()
    {
        if (DataGrid is not null && Initialized && ParametersSet)
        {
            //Set the URL to include page number which updates when the page is changed in the MudDataGridPager
            var pageNumber = DataGrid!.CurrentPage + 1;

            if (pageNumber != PageNumber || AddSuccessIdToHistory || PageNumberNullInUrl) // Check if the page has actually changed or the url needs updating before navigating
            {
                var queryString = GetQueryString();
                var shouldReplaceUrlHistory = PageNumberNullInUrl;
                NavigationManager.NavigateTo($"/students/page/{pageNumber}{queryString}", replace: shouldReplaceUrlHistory);

                AddSuccessIdToHistory = false;
                PageNumberNullInUrl = false;
            }
        }
    }

    internal StudentSearchFilters? Filters { get; set; } 

    internal async Task<GridData<StudentDto>> ServerReload(GridState<StudentDto> state, StudentSearchFilters filters)
    {
        ShowError = false;
        Filters = filters;

        //TODO operators
        var studentsResponse = await _studentClient.GetStudentsRestResponse(sId: filters.ParsedSIdFilter, name: filters.ParsedNameFilter, gpaQuery: GetGPAQueryDto(filters), page: state.Page + 1, pageSize: state.PageSize);

        if (studentsResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            //TODO show no students found message
            await InvokeAsync(StateHasChanged);
            return new GridData<StudentDto>();
        }
        if (studentsResponse.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            //Parse error text programatically,  TODO update rest client + api response types
            Console.WriteLine(studentsResponse.Content);
            var error = JsonNode.Parse(studentsResponse.Content);
            ShowError = true;
            ErrorMessage = error["errors"]?.ToJsonString(); 
            await InvokeAsync(StateHasChanged);
            return new GridData<StudentDto>();
        }
        if (!studentsResponse.IsSuccessStatusCode)
        {
            ShowError = true;
            ErrorMessage = DefaultErrorMessage;
            await InvokeAsync(StateHasChanged);
            return new GridData<StudentDto>();
        }

        ShowError = false;
        return new GridData<StudentDto>()
        {
            Items = studentsResponse.Data.Items, //TODO check data length
            TotalItems = studentsResponse.Data.TotalCount
        };
    }

    /// <returns>
    /// Mapping from <see cref="Constants.SearchFilters.Students.GPAFilterOperators"/> to <see cref="Harri.SchoolDemoAPI.Models.Dto.GPAQueryDto"/>
    /// </returns>
    private GPAQueryDto? GetGPAQueryDto(StudentSearchFilters filters)
    {
        if (filters.ParsedGPAFilter is null && filters.GPAFilter?.Operator != FilterOperator.Number.Empty) return null;

        return filters.GPAFilter?.Operator switch
        {
            FilterOperator.Number.Equal => new GPAQueryDto() { GPA = new() { Eq = filters.ParsedGPAFilter } },
            //TODO not empty
            FilterOperator.Number.Empty => new GPAQueryDto() { GPA = new() { IsNull = true } },
            FilterOperator.Number.GreaterThan => new GPAQueryDto() { GPA = new() { Gt = filters.ParsedGPAFilter } },
            FilterOperator.Number.LessThan => new GPAQueryDto() { GPA = new() { Lt = filters.ParsedGPAFilter } },
            _ => throw new ArgumentOutOfRangeException(nameof(filters.GPAFilter.Operator), $"Unexpected GPAFilter.Operator value: {filters.GPAFilter.Operator}"),
        };
    }

    private string GetQueryString()
    {
        //TODO test this in bunit tests
        if (SuccessfulStudentId is not null)
        {
            return $"?{Constants.QueryString.CreateSuccessId}={SuccessfulStudentId}";
        }
        else if (EditSuccessfulStudentId is not null)
        {
            return $"?{Constants.QueryString.EditSuccessId}={EditSuccessfulStudentId}";
        }
        else if (DeleteStudentIdAlert is not null)
        {
            return $"?{Constants.QueryString.DeleteStudentId}={DeleteStudentIdAlert}";
        }
        return "";
    }

    private void CloseSuccessAlert()
    {
        SuccessfulStudentId = null;
        EditSuccessfulStudentId = null;
        DeleteStudentIdAlert = null;
        AddSuccessIdToHistory = true;
    }
}