@page "/students"
@page "/students/page"
@page "/students/page/{PageNumber:int}"
@using Harri.SchoolDemoAPI.BlazorWASM.Components.Alerts
@using Harri.SchoolDemoAPI.BlazorWASM.Filters
@inject NavigationManager NavigationManager
@inject IStudentApi _studentClient

<PageTitle>Students</PageTitle>

<MudContainer MaxWidth=MaxWidth.Medium>
    <MudText Typo=Typo.h3 GutterBottom>Students</MudText>

    @if (ShowError)
    {
        <MudAlert id="student-error-alert" Severity="Severity.Error" Variant="Variant.Filled">@Text.StudentsPage.ErrorText</MudAlert>
    }
    <StudentAlert Severity=Severity.Success id="student-success-alert" Class="mb-4" Message=Text.StudentsPage.SuccessMessage StudentId=@SuccessfulStudentId CloseCallback=CloseSuccessAlert />
    <StudentAlert Severity=Severity.Success id="student-edit-success-alert" Class="mb-4" Message=Text.StudentsPage.EditSuccessMessage StudentId=@EditSuccessfulStudentId CloseCallback=CloseSuccessAlert />
    <StudentAlert Severity=Severity.Warning id="student-delete-alert" Class="mb-4" Message=Text.StudentsPage.DeleteSuccessMessage StudentId=@DeleteStudentIdAlert CloseCallback=CloseSuccessAlert />

    <MudDataGrid T=StudentDto @ref=DataGrid ServerData=ServerReload Hover=true Striped=true Dense=true RowsPerPage=15 CurrentPage=CurrentPage Breakpoint=Breakpoint.None 
        Filterable FilterMode=DataGridFilterMode.ColumnFilterRow >

       @*  <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value=SearchString id="student-search" Placeholder="Search" Adornment=Adornment.Start Immediate
                AdornmentIcon=@Icons.Material.Filled.Search IconSize=Size.Medium Class="mt-0"></MudTextField>
        </ToolBarContent> *@
        <Columns>
            <PropertyColumn Property="x => x.SId">
                <FilterTemplate>
                    <MudStack Row="true">
                        <MudTextField T="int?" id="student-search-sid" Value="@SIdSearchInt" ValueChanged="@SIdFilterChanged" FullWidth="true" Margin="@Margin.Dense" Immediate="true" DebounceInterval="500.0" Placeholder="Search id"/> @* ValueChanged="@StringValueChangedAsync"Placeholder="@Localizer[LanguageResource.MudDataGrid_FilterValue]" *@ 
                        <MudIconButton id="student-search-sid-clear" Class="align-self-center" Icon="@Icons.Material.Filled.FilterAltOff" Size="@Size.Small" OnClick="@ClearSIdSearchString"></MudIconButton>
                    </MudStack>
                </FilterTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Name" Title="Name">
                <FilterTemplate>
                    <!-- https://github.com/MudBlazor/MudBlazor/blob/24c0c4b1dcd358e7ce071c1b14eab751a91632df/src/MudBlazor/Components/DataGrid/FilterHeaderCell.razor#L4 -->
                    <!-- https://github.com/MudBlazor/MudBlazor/blob/24c0c4b1dcd358e7ce071c1b14eab751a91632df/src/MudBlazor/Components/DataGrid/FilterHeaderCell.razor.cs#L89-->
                    <MudStack Row="true">
                        <MudTextField T="string" id="student-search" Value="@SearchString" ValueChanged="@NameFilterChanged" FullWidth="true" Margin="@Margin.Dense" Immediate="true" DebounceInterval="500.0" Placeholder="Search name"/> @* ValueChanged="@StringValueChangedAsync"Placeholder="@Localizer[LanguageResource.MudDataGrid_FilterValue]" *@ 
@* 
                <MudMenu Icon="@Icons.Material.Filled.FilterAlt" Size="@Size.Small" Dense="true">
                            <MudMenuItem Style="" OnClick="@(async () => await ChangeOperatorAsync(o))">@Localizer[FilterOperator.GetTranslationKeyByOperatorName(o)]</MudMenuItem>
                     @foreach (var o in operators)
                    {
                        if (!string.IsNullOrWhiteSpace(o))
                        {
                            <MudMenuItem Style="@chosenOperatorStyle(o)" OnClick="@(async () => await ChangeOperatorAsync(o))">@Localizer[FilterOperator.GetTranslationKeyByOperatorName(o)]</MudMenuItem>
                        }
                    } 
                </MudMenu> *@
                        <MudIconButton id="student-search-clear" Class="align-self-center" Icon="@Icons.Material.Filled.FilterAltOff" Size="@Size.Small" OnClick="@ClearSearchString"></MudIconButton>
                    </MudStack>
                </FilterTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.GPA" />
            <TemplateColumn CellClass="d-flex justify-end mr-2" Filterable=false>
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Class="student-edit-button" OnClick=@(() => GoToEditStudent(context.Item.SId)) Size=Size.Small Variant=Variant.Filled Color=Color.Primary StartIcon=@Icons.Material.Filled.Edit DisableElevation>Edit</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T=StudentDto PageSizeOptions=@(new int[] { 10, 15, 50, 100 }) />
        </PagerContent>
    </MudDataGrid>
    
</MudContainer>

@code {
    //PagedList<StudentDto>? AllStudents { get; set; }

    [Parameter]
    public int? PageNumber { get; set; }

    // Create/Edit success alerts
    [Parameter, SupplyParameterFromQuery(Name = Constants.QueryString.CreateSuccessId)]
    public string? SuccessfulStudentId { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = Constants.QueryString.EditSuccessId)]
    public string? EditSuccessfulStudentId { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = Constants.QueryString.DeleteStudentId)]
    public string? DeleteStudentIdAlert { get; set; }

    internal bool ShowError { get; set; }

    public int CurrentPage { get; set; }

    internal bool AddSuccessIdToHistory { get; set; }

    internal string? SearchString { get; set; }
    internal int? SIdSearchInt { get; set; }

    internal async Task ClearSearchString() {
        await NameFilterChanged("");
    }

    internal async Task ClearSIdSearchString() {
        await SIdFilterChanged(null);
    }

    internal async Task NameFilterChanged(string newSearchString) {
        SearchString = newSearchString;

        await DataGrid?.ReloadServerData();
    }

    internal async Task SIdFilterChanged(int? newSearchString) {
        SIdSearchInt = newSearchString;

        await DataGrid?.ReloadServerData();
    }

    private MudDataGrid<StudentDto>? DataGrid;

    private bool PageNumberNullInUrl { get; set; }

    // Lifecycle properties
    private bool Initialized { get; set; }

    private bool ParametersSet { get; set; }

    private bool RegisterEventHandlers { get; set; } = true;

    private FilterDefinition<string> fd;

    protected override void OnInitialized()
    {
        Initialized = true;
    }

    protected override void OnParametersSet()
    {
        if (PageNumber is null) PageNumberNullInUrl = true;

        PageNumber = PageNumber ?? 1;
        CurrentPage = (PageNumber.Value) - 1;
        ParametersSet = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (ParametersSet && RegisterEventHandlers)
        {
            RegisterEventHandlers = false;

            DataGrid!.PagerStateHasChangedEvent += () => PagerStateChanged();
        }
    }

    private void GoToEditStudent(int? sid)
    {
        NavigationManager.NavigateTo($"/students/{sid}", replace: false);
    }

    private void PagerStateChanged() 
    {
        if (DataGrid is not null && Initialized && ParametersSet)
        {
            //Set the URL to include page number which updates when the page is changed in the MudDataGridPager
            var pageNumber = DataGrid!.CurrentPage + 1;

            if (pageNumber != PageNumber || AddSuccessIdToHistory || PageNumberNullInUrl) // Check if the page has actually changed or the url needs updating before navigating
            {
                var queryString = GetQueryString();
                var shouldReplaceUrlHistory = PageNumberNullInUrl;
                NavigationManager.NavigateTo($"/students/page/{pageNumber}{queryString}", replace: shouldReplaceUrlHistory);

                AddSuccessIdToHistory = false;
                PageNumberNullInUrl = false;
            }
        }
    }

    //TODO test in unit
    private async Task<GridData<StudentDto>> ServerReload(GridState<StudentDto> state)
    {
        ShowError = false;
        var nameFilterValue = SearchString;
        var sIdFilterValue = SIdSearchInt;

        Console.WriteLine($"filterValue: {nameFilterValue}");

        var studentsResponse = await _studentClient.GetStudentsRestResponse(sId: sIdFilterValue, name: nameFilterValue, page: state.Page + 1, pageSize: state.PageSize);

        if (studentsResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            //TODO show no students found message
            StateHasChanged();
            return new GridData<StudentDto>();
        }
        if (!studentsResponse.IsSuccessStatusCode)
        {
            ShowError = true;
            StateHasChanged();
            return new GridData<StudentDto>();
        }

        return new GridData<StudentDto>()
            {
                Items = studentsResponse.Data.Items,
                TotalItems = studentsResponse.Data.TotalCount
            };
    }


    private string GetQueryString()
    {
        //TODO test this in bunit tests
        if (SuccessfulStudentId is not null)
        {
            return $"?{Constants.QueryString.CreateSuccessId}={SuccessfulStudentId}";
        }
        else if (EditSuccessfulStudentId is not null)
        {
            return $"?{Constants.QueryString.EditSuccessId}={EditSuccessfulStudentId}";
        }
        else if (DeleteStudentIdAlert is not null)
        {
            return $"?{Constants.QueryString.DeleteStudentId}={DeleteStudentIdAlert}";
        }
        return "";
    }

    private void CloseSuccessAlert()
    {
        SuccessfulStudentId = null;
        EditSuccessfulStudentId = null;
        DeleteStudentIdAlert = null;
        AddSuccessIdToHistory = true;
    }
}