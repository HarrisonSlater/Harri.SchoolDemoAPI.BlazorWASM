@page "/students"
@page "/students/page/{PageNumber:int}"
@using Harri.SchoolDemoAPI.BlazorWASM.Filters
@inject NavigationManager NavigationManager
@inject IStudentApiClient _studentClient

<PageTitle>Students</PageTitle>

<MudContainer MaxWidth=MaxWidth.Medium>
    <MudText Typo=Typo.h3 GutterBottom>Students</MudText>
    @if (ShowSuccessMessage)
    {
        <MudAlert id="student-success-alert" Class="mb-4" Severity=Severity.Success Variant=Variant.Filled data-student-id=@SuccessfulStudentId
            ShowCloseIcon CloseIconClicked="CloseSuccessAlert">@SuccessMessage</MudAlert>
    }
    <MudDataGrid T=StudentDto @ref=DataGrid Items=AllStudents Hover=true Striped=true Dense=true RowsPerPage=15 CurrentPage=CurrentPage Breakpoint=Breakpoint.None
            QuickFilter=StudentDtoFilter.QuickFilterFor(SearchString)>

        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value=SearchString id="student-search" Placeholder="Search" Adornment=Adornment.Start Immediate
                AdornmentIcon=@Icons.Material.Filled.Search IconSize=Size.Medium Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.SId" />
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.GPA" />
            <TemplateColumn CellClass="d-flex justify-end mr-2">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Class="student-edit-button" OnClick=@(() => GoToEditStudent(context.Item.SId)) Size=Size.Small Variant=Variant.Filled Color=Color.Primary StartIcon=@Icons.Material.Filled.Edit DisableElevation>Edit</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T=StudentDto PageSizeOptions=@(new int[] { 10, 15, 50, 100 }) />
        </PagerContent>
    </MudDataGrid>
    
</MudContainer>

@code {
    List<StudentDto>? AllStudents { get; set; }

    [Parameter]
    public int? PageNumber { get; set; }

    // This query parameter would be better as a strongly typed int however Blazor will 
    // throw an System.InvalidOperationException that will error out the whole page
    // when in fact we want to be able to easily recover from a bad value
    [Parameter, SupplyParameterFromQuery(Name = "successId")]
    public string? SuccessfulStudentId { get; set; }

    public int CurrentPage { get; set; }

    internal bool ShowSuccessMessage => SuccessfulStudentId is not null;

    internal string SuccessMessage => $"A student with ID '{SuccessfulStudentId}' was created successfully";

    internal bool AddSuccessIdToHistory { get; set; }

    internal string? SearchString { get; set; }

    private MudDataGrid<StudentDto>? DataGrid;

    private bool PageNumberNullInUrl { get; set; }

    // Lifecycle properties
    private bool Initialized { get; set; }

    private bool ParametersSet { get; set; }

    private bool RegisterEventHandlers { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var studentsResponse = await _studentClient.GetStudentsRestResponse();

        if (studentsResponse.Data != null)
        {
            AllStudents = studentsResponse.Data;
        }

        Initialized = true;
    }

    protected override void OnParametersSet()
    {
        if (PageNumber is null) PageNumberNullInUrl = true;

        PageNumber = PageNumber ?? 1;
        CurrentPage = (PageNumber ?? 1) - 1;
        ParametersSet = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (ParametersSet && RegisterEventHandlers)
        {
            RegisterEventHandlers = false;
            
            DataGrid!.PagerStateHasChangedEvent += () => PagerStateChanged();
        }
    }

    private void GoToEditStudent(int? sid)
    {
        NavigationManager.NavigateTo($"/student/{sid}", replace: false);
    }

    private void PagerStateChanged() 
    {
        if (DataGrid is not null && Initialized && ParametersSet)
        {
            //Set the URL to include page number which updates when the page is changed in the MudDataGridPager
            var pageNumber = DataGrid!.CurrentPage + 1;

            if (pageNumber != PageNumber || AddSuccessIdToHistory || PageNumberNullInUrl) // Check if the page has actually changed or the url needs updating before navigating
            {
                var queryString = SuccessfulStudentId is not null ? $"?successId={SuccessfulStudentId}" : "";
                var shouldReplaceUrlHistory = PageNumberNullInUrl;
                NavigationManager.NavigateTo($"/students/page/{pageNumber}{queryString}", replace: shouldReplaceUrlHistory);

                AddSuccessIdToHistory = false;
                PageNumberNullInUrl = false;
            }
        }
    }

    private void CloseSuccessAlert()
    {
        SuccessfulStudentId = null;
        AddSuccessIdToHistory = true;
    }
}