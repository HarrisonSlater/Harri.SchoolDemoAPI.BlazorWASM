@page "/students"
@page "/students/page"
@page "/students/page/{PageNumber:int}"
@using Harri.SchoolDemoAPI.BlazorWASM.Components.Alerts
@using Harri.SchoolDemoAPI.BlazorWASM.Filters
@inject NavigationManager NavigationManager
@inject IStudentApi _studentClient

<PageTitle>Students</PageTitle>

<MudContainer MaxWidth=MaxWidth.Medium>
    <MudText Typo=Typo.h3 GutterBottom>Students</MudText>

    @if (ShowError)
    {
        <MudAlert id="student-error-alert" Severity="Severity.Error" Variant="Variant.Filled">@Text.StudentsPage.ErrorText</MudAlert>
    }
    <StudentAlert Severity=Severity.Success id="student-success-alert" Class="mb-4" Message=Text.StudentsPage.SuccessMessage StudentId=@SuccessfulStudentId CloseCallback=CloseSuccessAlert />
    <StudentAlert Severity=Severity.Success id="student-edit-success-alert" Class="mb-4" Message=Text.StudentsPage.EditSuccessMessage StudentId=@EditSuccessfulStudentId CloseCallback=CloseSuccessAlert />
    <StudentAlert Severity=Severity.Warning id="student-delete-alert" Class="mb-4" Message=Text.StudentsPage.DeleteSuccessMessage StudentId=@DeleteStudentIdAlert CloseCallback=CloseSuccessAlert />

    <MudDataGrid T=StudentDto @ref=DataGrid ServerData=ServerReload Hover=true Striped=true Dense=true RowsPerPage=15 CurrentPage=CurrentPage Breakpoint=Breakpoint.None
                 Filterable FilterMode=DataGridFilterMode.ColumnFilterRow>

        @*  <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value=SearchString id="student-search" Placeholder="Search" Adornment=Adornment.Start Immediate
        AdornmentIcon=@Icons.Material.Filled.Search IconSize=Size.Medium Class="mt-0"></MudTextField>
        </ToolBarContent> *@
        <Columns>
            <PropertyColumn Property="x => x.SId" Title="Student ID" Class="filter-input-sid filter-disable-operators" />
            <PropertyColumn Property="x => x.Name" Title="Name" Class="filter-input-student-name filter-disable-operators" />
            <PropertyColumn Property="x => x.GPA" />
            <TemplateColumn CellClass="d-flex justify-end mr-2" Filterable=false>
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Class="student-edit-button" OnClick=@(() => GoToEditStudent(context.Item.SId)) Size=Size.Small Variant=Variant.Filled Color=Color.Primary StartIcon=@Icons.Material.Filled.Edit DisableElevation>Edit</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T=StudentDto PageSizeOptions=@(new int[] { 10, 15, 50, 100 }) />
        </PagerContent>
    </MudDataGrid>

</MudContainer>

@code {
    [Parameter]
    public int? PageNumber { get; set; }

    // Create/Edit success alerts
    [Parameter, SupplyParameterFromQuery(Name = Constants.QueryString.CreateSuccessId)]
    public string? SuccessfulStudentId { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = Constants.QueryString.EditSuccessId)]
    public string? EditSuccessfulStudentId { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = Constants.QueryString.DeleteStudentId)]
    public string? DeleteStudentIdAlert { get; set; }

    internal bool ShowError { get; set; }

    public int CurrentPage { get; set; }

    internal bool AddSuccessIdToHistory { get; set; }

    //internal string? SearchString { get; set; }

    //TODO refactor into separate component
    /*
    internal string? SIdSearchString { get; set; }
    internal int? SIdSearchInt { get; set; }
    internal bool SIdError { get; set; }
    */
    //internal bool SIdErrorMessage { get; set; }

        /*
        internal async Task ClearSearchString()
        {
        await NameFilterChanged("");
        }

        internal async Task ClearSIdSearchString()
        {
        await SIdFilterChanged(null);
    }

    internal async Task NameFilterChanged(string newSearchString)
    {
    SearchString = newSearchString;

        await DataGrid?.ReloadServerData();
        }

        internal async Task SIdFilterChanged(string newSearchString)
        {
        SIdSearchString = newSearchString;
            SIdSearchInt = InputHelper.ParseInt(newSearchString);
                if (!string.IsNullOrWhiteSpace(newSearchString))
                {
                if (SIdSearchInt is null)
                {
                SIdError = true;
                return; // Don't reset input field when typing text by accident
            }
            //TODO refactor SID filter into separate component and bind iwht model with validation atttributes to automatically handle aerrors
        }

        SIdError = false;

        await DataGrid?.ReloadServerData();
    }
    */

    internal MudDataGrid<StudentDto>? DataGrid;

    private bool PageNumberNullInUrl { get; set; }

    // Lifecycle properties
    private bool Initialized { get; set; }

    private bool ParametersSet { get; set; }

    private bool RegisterEventHandlers { get; set; } = true;

    protected override void OnInitialized()
    {
        Initialized = true;
    }

    protected override void OnParametersSet()
    {
        if (PageNumber is null) PageNumberNullInUrl = true;

        PageNumber = PageNumber ?? 1;
        CurrentPage = (PageNumber.Value) - 1;
        ParametersSet = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (ParametersSet && RegisterEventHandlers)
        {
            RegisterEventHandlers = false;

            DataGrid!.PagerStateHasChangedEvent += () => PagerStateChanged();
        }
    }

    private void GoToEditStudent(int? sid)
    {
        NavigationManager.NavigateTo($"/students/{sid}", replace: false);
    }

    private void PagerStateChanged()
    {
        if (DataGrid is not null && Initialized && ParametersSet)
        {
            //Set the URL to include page number which updates when the page is changed in the MudDataGridPager
            var pageNumber = DataGrid!.CurrentPage + 1;

            if (pageNumber != PageNumber || AddSuccessIdToHistory || PageNumberNullInUrl) // Check if the page has actually changed or the url needs updating before navigating
            {
                var queryString = GetQueryString();
                var shouldReplaceUrlHistory = PageNumberNullInUrl;
                NavigationManager.NavigateTo($"/students/page/{pageNumber}{queryString}", replace: shouldReplaceUrlHistory);

                AddSuccessIdToHistory = false;
                PageNumberNullInUrl = false;
            }
        }
    }

    internal string? ParsedNameFilter { get; set; }
    internal int? ParsedSIdFilter { get; set; }
    internal decimal? ParsedGPAFilter { get; set; }

    //TODO test in unit
    private async Task<GridData<StudentDto>> ServerReload(GridState<StudentDto> state)
    {
        ShowError = false;
        var nameFilter = state.FilterDefinitions.SingleOrDefault(x => x?.Column?.PropertyName == "Name");
        var sIdFilter = state.FilterDefinitions.SingleOrDefault(x => x?.Column?.PropertyName == "SId");
        var gpaFilter = state.FilterDefinitions.SingleOrDefault(x => x?.Column?.PropertyName == "GPA");

        var filterContext1 = sIdFilter?.Column?.FilterContext;
        
        //sIdFilter.Column.
        /*
        var nameFilterValueType = nameFilter?.Value?.GetType();
        var sIdFilterValueType = sIdFilter?.Value?.GetType();
        Console.WriteLine($"nameFilterValueType {nameFilterValueType}");
        Console.WriteLine($"sIdFilterValueType  {sIdFilterValueType}");
        */

        ParsedNameFilter = (string?)nameFilter?.Value;
        ParsedSIdFilter = sIdFilter?.Value == null ? null : Convert.ToInt32((double?)sIdFilter?.Value); //All defaults MudBlazor filters treat any number as a double
        ParsedGPAFilter = gpaFilter?.Value == null ? null : Convert.ToDecimal((double?)gpaFilter?.Value); 

        Console.WriteLine($"filterValue: {nameFilter?.Value}");

        var studentsResponse = await _studentClient.GetStudentsRestResponse(sId: ParsedSIdFilter, name: ParsedNameFilter, gpaQuery: new GPAQueryDto() { GPA = new() { Gt = ParsedGPAFilter } }, page: state.Page + 1, pageSize: state.PageSize);

        if (studentsResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            //TODO show no students found message
            StateHasChanged();
            return new GridData<StudentDto>();
        }
        if (!studentsResponse.IsSuccessStatusCode)
        {
            var filterContext = sIdFilter?.Column?.FilterContext;
            ShowError = true;
            StateHasChanged();
            return new GridData<StudentDto>();
        }

        return new GridData<StudentDto>()
        {
            Items = studentsResponse.Data.Items,
            TotalItems = studentsResponse.Data.TotalCount
        };
    }


    private string GetQueryString()
    {
        //TODO test this in bunit tests
        if (SuccessfulStudentId is not null)
        {
            return $"?{Constants.QueryString.CreateSuccessId}={SuccessfulStudentId}";
        }
        else if (EditSuccessfulStudentId is not null)
        {
            return $"?{Constants.QueryString.EditSuccessId}={EditSuccessfulStudentId}";
        }
        else if (DeleteStudentIdAlert is not null)
        {
            return $"?{Constants.QueryString.DeleteStudentId}={DeleteStudentIdAlert}";
        }
        return "";
    }

    private void CloseSuccessAlert()
    {
        SuccessfulStudentId = null;
        EditSuccessfulStudentId = null;
        DeleteStudentIdAlert = null;
        AddSuccessIdToHistory = true;
    }
}