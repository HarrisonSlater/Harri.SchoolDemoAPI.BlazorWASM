@page "/students"
@page "/students/page/{PageNumber:int}"
@inject NavigationManager NavigationManager
@inject IStudentApiClient _studentClient

<PageTitle>Students</PageTitle>


<MudContainer MaxWidth=MaxWidth.Medium>
    <MudText Typo="Typo.h3" GutterBottom="true">Students</MudText>
    @if (ShowSuccessMessage)
    {
        <MudAlert id="student-success-alert" Class="mb-4" Severity="Severity.Success" Variant="Variant.Filled" data-student-id="SuccessfulStudentId"
            ShowCloseIcon CloseIconClicked="CloseSuccessAlert">@SuccessMessage</MudAlert>
    }
    @*<MudTable Items=AllStudents Hover=true Striped=true Dense=true RowsPerPage=20 CurrentPage=@PageNumber>
        <HeaderContent>
            <MudTh>SId</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>GPA</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="SId">@context.SId</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="GPA">@context.GPA</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager @ref=@Pager PageSizeOptions="new int[] { 10, 20, 50, 100 }"/>
        </PagerContent>
    </MudTable>
        *@
    @*CurrentPage=@(PageNumber!.Value - 1)*@
    @*@if (AllStudents is not null) {*@
    <MudDataGrid T=StudentDto @ref=DataGrid Items=AllStudents Hover=true Striped=true Dense=true RowsPerPage=15 CurrentPage=@(CurrentPage) Breakpoint=Breakpoint.None
        QuickFilter=@_quickFilter>
        <ToolBarContent>
            @*<MudText Typo="Typo.h6">Periodic Elements</MudText>*@
            <MudSpacer />
            <MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.SId" />
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.GPA" />
            <TemplateColumn CellClass="d-flex justify-end mr-2">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton OnClick="@(() => GoToEditStudent(context.Item.SId))" Size=Size.Small Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Class="" DisableElevation >Edit</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T=StudentDto PageSizeOptions="new int[] { 10, 15, 50, 100 }" />
        </PagerContent>
    </MudDataGrid>
    
</MudContainer>

@code {
    List<StudentDto>? AllStudents { get; set; }

    [Parameter]
    public int? PageNumber { get; set; }
    //private int PageIndex => PageNumber - 1;

    // This would be better as a strongly typed int however Blazor will 
    // throw an System.InvalidOperationException that will error out the whole page
    // when in fact we want to be able to easily recover from a bad value
    [Parameter, SupplyParameterFromQuery(Name = "successId")]
    public string? SuccessfulStudentId { get; set; }

    public int CurrentPage { get; set; }
    //internal bool ParametersSet { get; set; }

    internal bool ShowSuccessMessage => SuccessfulStudentId is not null;

    internal string SuccessMessage => $"A student with ID '{SuccessfulStudentId}' was created successfully";

    internal bool AddSuccessIdToHistory { get; set; }

    internal string SearchString { get; set; }

    private MudDataGrid<StudentDto>? DataGrid;

    private Func<StudentDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(SearchString))
            return true;

        if (x.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.SId.ToString().Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.GPA.ToString().Contains(SearchString))
            return true;

        return false;
    };

    private bool Initialized { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var studentsResponse = await _studentClient.GetStudentsRestResponse();

        if (studentsResponse.Data != null)
        {
            AllStudents = studentsResponse.Data;
        }
        //DataGrid!.PagerStateHasChangedEvent += () => PagerStateChanged();
        Initialized = true;
    }
    private bool PageNumberNullInUrl { get; set; }
    private bool ParametersSet { get; set; }
    protected override void OnParametersSet()
    {
        if (PageNumber is null) PageNumberNullInUrl = true;

        PageNumber = PageNumber ?? 1;
        CurrentPage = (PageNumber ?? 1) - 1;
        ParametersSet = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CurrentPage = (PageNumber ?? 1) - 1;

            DataGrid.CurrentPage = CurrentPage;
            DataGrid.PagerStateHasChangedEvent += () => PagerStateChanged();
        }
    }

    private void GoToEditStudent(int? sid)
    {
        NavigationManager.NavigateTo($"/student/{sid}", replace: true);
    }

    private void PagerStateChanged() 
    {
        if (DataGrid is not null && Initialized && ParametersSet)
        {
            //Set the URL to include page number which updates when the page is changed in the MudDataGridPager
            var pageNumber = DataGrid!.CurrentPage + 1;
            //TODO add case for /page without /1
            if (pageNumber != PageNumber || AddSuccessIdToHistory || PageNumberNullInUrl) // Check if the page has actually changed before navigating
            {
                var queryString = SuccessfulStudentId is not null ? $"?successId={SuccessfulStudentId}" : "";
                NavigationManager.NavigateTo($"/students/page/{pageNumber}{queryString}", replace: false);//!AddSuccessIdToHistory);

                AddSuccessIdToHistory = false;
                PageNumberNullInUrl = false;
            }
        }
    }

    private void CloseSuccessAlert()
    {
        SuccessfulStudentId = null;
        AddSuccessIdToHistory = true;
    }
}