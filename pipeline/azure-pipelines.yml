# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  Solution: '**/*.sln'
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'
  CommitIdForGitHub: $[coalesce(variables['System.PullRequest.SourceCommitId'], variables['Build.SourceVersion'])]
#  PortToTest: 80
  APIPortToTest: 8080
  SchoolDemoBaseUrl: 'http://localhost/' # variable that overrides appsettings.json in UI tests

  DockerNamespace: harrisonslater
  DockerSQLImageName: harri-schooldemosql-database:latest
#  DockerImageRepository: harri-schooldemoapi
  DockerAPIImageName: harri-schooldemoapi:latest
  DockerVersion: '25.0.5'

stages:
- stage: 'Build'
  displayName: 'Build the Blazor WASM Web App'
  jobs: 
    - job: 'Build'
      steps:

      - task: NuGetToolInstaller@1

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          projects: '$(Solution)'
          feedsToUse: 'select'
          workingDirectory: '$(Build.Repository.LocalPath)'
          
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build - $(BuildConfiguration)'
        inputs:
          command: 'build'
          projects: '$(Solution)'
          arguments: '--no-restore --configuration $(BuildConfiguration) /p:Platform="$(BuildPlatform)" /p:SkipInvalidConfigurations=true"'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test - Unit'
        inputs:
          command: 'test'
          projects: '**/Harri.SchoolDemoAPI.BlazorWASM.Tests.Unit.csproj'
          testRunTitle: 'Run Unit Tests'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish - $(BuildConfiguration)'
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '--no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/Build/$(BuildConfiguration)'
          
      - publish: '$(Build.ArtifactStagingDirectory)/Build'
        artifact: build

- stage: 'DeployAndTest'
  displayName: 'Deploy and Test'
  dependsOn: Build
  jobs: 
    - job: 'DeployAndTestJob'
      displayName: 'Deploy (in-agent) and run UI E2E tests'
      steps:

      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'build'
          downloadPath: '$(System.DefaultWorkingDirectory)'
          cleanDestinationFolder: false

      - script: 'ls $(System.DefaultWorkingDirectory)'
#      - script: 'ls $(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.BlazorWASM.Tests.UI.E2E'

#      - script: 'sudo nginx -s quit'
      - script: 'sudo rm /var/www/html/*'

#      - script: 'sudo unzip $(System.DefaultWorkingDirectory)/Release/Harri.SchoolDemoAPI.BlazorWASM.zip -d /var/www/html'

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '**/Harri.SchoolDemoAPI.BlazorWASM.zip'
          destinationFolder: '$(System.DefaultWorkingDirectory)/Extract'
          cleanDestinationFolder: true
          overwriteExistingFiles: false

      - script: 'sudo mv $(System.DefaultWorkingDirectory)/Extract/wwwroot/* /var/www/html/'
          
      - script: 'sudo service nginx start'
      - script: 'cat /etc/nginx/sites-available/default'
      - script: 'ls /var/www/html'

#      - script: | 
#          cd $(System.DefaultWorkingDirectory)/Extract/
#          nohup dotnet ./Harri.SchoolDemoAPI.BlazorWASM.dll --urls=$(SchoolDemoBaseUrl) &
#          echo "##vso[task.setvariable variable=dotnetProcessId;]"$!
#          cd $(System.DefaultWorkingDirectory)
#        displayName: Run SchoolDemo Blazor Admin UI $(BuildConfiguration) build
      
      - task: DockerInstaller@0
        inputs:
          dockerVersion: $(DockerVersion)

      - script: 'docker pull $(DockerNamespace)/$(DockerSQLImageName)'
        displayName: docker pull SQL DB Image

      - script: 'docker pull $(DockerNamespace)/$(DockerAPIImageName)'
        displayName: docker pull REST API Image

      - script: 'docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=p@ssw0rd" -p 1433:1433 -d $(DockerNamespace)/$(DockerSQLImageName)'
        displayName: docker run - School Demo SQL DB Container
      
      - script: 'docker run -d -p $(APIPortToTest):8080 --add-host=host.docker.internal:host-gateway $(DockerNamespace)/$(DockerAPIImageName)'
        displayName: docker run - School Demo API Container

      - script: 'sleep 2s'

      - script: 'curl -X GET -S -L http://localhost:8080/'
      - script: 'curl -X GET -S http://localhost:8080/students/1'
      - task: FileTransform@1
        displayName: appsettings.json transform
        inputs:
          folderPath: '$(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.BlazorWASM.Tests.UI.E2E'
          fileType: 'json'
          targetFiles: 'appsettings.json'
        
      - script: 'curl -X GET -S -L $(SchoolDemoBaseUrl)'
      - script: 'curl -X GET -S -L $(SchoolDemoBaseUrl)students'
#      - script: 'curl -X GET -S -L $(SchoolDemoBaseUrl)students/123'

      - task: DotNetCoreCLI@2
        inputs:
            command: 'build'
            projects: '**/Harri.SchoolDemoAPI.BlazorWASM.Tests.UI.E2E.csproj'
            
      - script: 'ls $(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.BlazorWASM.Tests.UI.E2E/bin/Debug/' 

      - script: 'pwsh $(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.BlazorWASM.Tests.UI.E2E/bin/Debug/net8.0/playwright.ps1 install'
      - task: DotNetCoreCLI@2
        displayName: dotnet test - UI E2E
        inputs:
          command: 'test'
          projects: '**/Harri.SchoolDemoAPI.BlazorWASM.Tests.UI.E2E.csproj'
          testRunTitle: 'UI E2E Tests'
